package com.designpatterns.behavioral2;

import java.util.Arrays;

// Strategy interface
interface SortStrategy {
    void sort(int[] array);
}

// Concrete strategy for Bubble Sort
class BubbleSort implements SortStrategy {
    @Override
    public void sort(int[] array) {
        System.out.println("Sorting array using Bubble Sort");
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    // Swap array[j] and array[j+1]
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }
}

// Concrete strategy for Quick Sort
class QuickSort implements SortStrategy {
    @Override
    public void sort(int[] array) {
        System.out.println("Sorting array using Quick Sort");
        quickSort(array, 0, array.length - 1);
    }

    private void quickSort(int[] array, int low, int high) {
        if (low < high) {
            int pi = partition(array, low, high);
            quickSort(array, low, pi - 1);
            quickSort(array, pi + 1, high);
        }
    }

    private int partition(int[] array, int low, int high) {
        int pivot = array[high];
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (array[j] < pivot) {
                i++;
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }
        int temp = array[i + 1];
        array[i + 1] = array[high];
        array[high] = temp;
        return i + 1;
    }
}

// Context class
class SortContext {
    private SortStrategy strategy;

    public void setStrategy(SortStrategy strategy) {
        this.strategy = strategy;
    }

    public void sortArray(int[] array) {
        if (strategy == null) {
            throw new IllegalStateException("Sorting strategy not set");
        }
        int[] copyArray = Arrays.copyOf(array, array.length);
        strategy.sort(copyArray);
        System.out.println("Sorted array: " + Arrays.toString(copyArray));
    }
}

// Demo class to test the sorting strategies
public class SortingAlgorithmDemo {
    public static void main(String[] args) {
        SortContext context = new SortContext();
        int[] arrayToSort = {64, 34, 25, 12, 22, 11, 90};

        System.out.println("Original array: " + Arrays.toString(arrayToSort));

        // Using Bubble Sort
        context.setStrategy(new BubbleSort());
        context.sortArray(arrayToSort);

        // Using Quick Sort
        context.setStrategy(new QuickSort());
        context.sortArray(arrayToSort);

        // Demonstrating that the original array remains unchanged
        System.out.println("Original array after sorting: " + Arrays.toString(arrayToSort));
    }
}